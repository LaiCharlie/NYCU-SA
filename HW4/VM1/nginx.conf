# path : /usr/local/openresty/nginx/conf/nginx.conf

# user  nobody;
user www-data;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    map $http_user_agent $loggable {
        default 1;
        "~no-logging" 0;
	}

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log;
    error_log   logs/error.log   info;

    sendfile        on;
    #tcp_nopush     on;

    server_tokens off;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # log_format  test_encode 'STATUS: $web_status\t$encode_log';
    # access_log  /home/judge/webserver/log/access.log test_encode if=$loggable;
    # access_log  /home/judge/webserver/log/access.log combined    if=$loggable;

    log_format  compress_log 'STATUS: $web_status\t$encode_log\n$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent"';
    access_log  /home/judge/webserver/log/compressed.log compress_log if=$loggable;

    geo $web_status {
        default "";
    }
    geo $encode_log {
        default "";
    }
    geo $resp_body {
        default "";
    }

    body_filter_by_lua_block {
        local resp_body = string.sub(ngx.arg[1], 1, 1000)
        ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
        if ngx.arg[2] then
            ngx.ctx.resp_body = ngx.ctx.buffered
        end
    }

    lua_need_request_body on;
    log_by_lua_block {
        local request_headers  = ngx.req.get_headers()
        local request_body     = ngx.req.get_body_data() or ""
        local response_headers = ngx.resp.get_headers() or {}
            
        local response_body = ngx.ctx.resp_body or ""
        local log_data = ""
        log_data = log_data .. "Request Headers:\n"
        for key, value in pairs(request_headers) do
            log_data = log_data .. key .. ": " .. value .. "\n"
        end
        log_data = log_data .. "\nRequest Body:\n"
        log_data = log_data .. (request_body ~= "" and request_body or "\n")
        log_data = log_data .. "\nResponse Headers:\n"
        for key, value in pairs(response_headers) do
            log_data = log_data .. key .. ": " .. value .. "\n"
        end
        log_data = log_data .. "\nResponse Body:\n"
        log_data = log_data .. (response_body ~= "" and response_body or "")
        
        ngx.var.web_status = ngx.status
        ngx.var.encode_log = ngx.encode_base64(log_data)
    }

	server {
		listen 80;
		listen [::]:80;

		server_name 108.cs.nycu;

		return 301 https://$host$request_uri;
	}

	server {
		listen 443 ssl;
		listen [::]:443 ssl;
    		
		server_name 108.cs.nycu;
		
		ssl_certificate /etc/nginx/ssl/ca.crt;
		ssl_certificate_key /etc/nginx/ssl/ca.key;
		
		add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
	}

    server {
        listen 80;
        listen [::]:80;

        server_name nasa.108.cs.nycu;

        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name nasa.108.cs.nycu;

        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        location / {
            auth_basic "Restricted Access";
            auth_basic_user_file /etc/nginx/.htpasswd;

            default_type text/plain;
            content_by_lua_block {
                ngx.say("2024-nycu.sa-hw4-vhost")
            }
        }
    }

    server {
        listen 80;
        listen [::]:80;

        server_name file.108.cs.nycu;

        return 301 https://$host$request_uri;
    }

    upstream backend_servers {
        server 192.168.108.1:8080;
        server 192.168.108.2:8080;
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name file.108.cs.nycu;

        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        location / {
            allow 127.0.0.1/32;
            allow 10.113.108.11/32;
            allow 192.168.108.0/24;
            deny  all;

            proxy_pass http://backend_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }

    server {
        listen 80;
        listen [::]:80;

        server_name adminer.108.cs.nycu;

        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name adminer.108.cs.nycu;

        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        
        root /var/www/html;

        location / {
            index adminer.php;
        }

        location ~ \.php$ {
            include fastcgi_params;
            fastcgi_pass unix:/run/php/php8.3-fpm.sock;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        }
    }

    server {
        listen 80;
        listen [::]:80;

        server_name *.108.cs.nycu;

        location / {
            return 301 https://http.cat/404;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name *.108.cs.nycu;

        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        location / {
            return 301 https://http.cat/404;
        }
    }
}
